#include "versions.h"
#include "ndp40.versions.h"

.assembly extern System
{
	.publickeytoken = SYSTEM_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_ASSEMBLY_VERSION_IL
}
.assembly extern System.Core
{
	.publickeytoken = SYSTEM_CORE_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_CORE_ASSEMBLY_VERSION_IL
}
.assembly extern mscorlib
{
	.publickeytoken = MSCORLIB_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver MSCORLIB_ASSEMBLY_VERSION_IL
}
.assembly System.Dynamic
{
	.custom instance void [mscorlib]System.CLSCompliantAttribute::.ctor(bool) = { bool(true) }
	.custom instance void [mscorlib]System.Runtime.CompilerServices.InternalsVisibleToAttribute::.ctor(string) = { string('Microsoft.CSharp, PublicKey =002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293') }
	.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = { bool(false) }
	.permissionset reqmin = (2E 01 80 84 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 53 65 63 75 72 69 74 79 50 65 72 6D 69 73 73 69 6F 6E 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 34 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 15 01 54 02 10 53 6B 69 70 56 65 72 69 66 69 63 61 74 69 6F 6E 01)
	.publickey = SYSTEM_DYNAMIC_ASSEMBLY_PUBLIC_KEY_IL
	.hash algorithm 0x00008004
	.ver SYSTEM_DYNAMIC_ASSEMBLY_VERSION_IL
}
.class private abstract sealed AssemblyRef
	extends [mscorlib]System.Object
{
	.field static assembly literal string ASPBrowserCapsFactory = "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"
	.field static assembly literal string ASPBrowserCapsPublicKey = "b7bd7678b977bd8f"
	.field static assembly literal string EcmaPublicKey = "b77a5c561934e089"
	.field static assembly literal string EcmaPublicKeyFull = "00000000000000000400000000000000"
	.field static assembly literal string EcmaPublicKeyToken = "b77a5c561934e089"
	.field static assembly literal string MicrosoftJScript = "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftPublicKey = "b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftPublicKeyFull = "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"
	.field static assembly literal string MicrosoftPublicKeyToken = "b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftVSDesigner = "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftVSDesignerMobile = "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftVisualStudio = "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftVisualStudioWeb = "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftVisualStudioWindowsForms = "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string MicrosoftWebDesign = "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string Mscorlib = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string PlatformPublicKey = "b77a5c561934e089"
	.field static assembly literal string PlatformPublicKeyFull = "00000000000000000400000000000000"
	.field static assembly literal string PlatformPublicKeyToken = "b77a5c561934e089"
	.field static assembly literal string SharedLibPublicKey = "31bf3856ad364e35"
	.field static assembly literal string SharedLibPublicKeyFull = "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"
	.field static assembly literal string SharedLibPublicKeyToken = "31bf3856ad364e35"
	.field static assembly literal string SilverlightPlatformPublicKey = "7cec85d7bea7798e"
	.field static assembly literal string SilverlightPlatformPublicKeyFull = "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"
	.field static assembly literal string SilverlightPlatformPublicKeyToken = "7cec85d7bea7798e"
	.field static assembly literal string SilverlightPublicKey = "31bf3856ad364e35"
	.field static assembly literal string SilverlightPublicKeyFull = "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"
	.field static assembly literal string SilverlightPublicKeyToken = "31bf3856ad364e35"
	.field static assembly literal string System = "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemComponentModelDataAnnotations = "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemConfiguration = "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemConfigurationInstall = "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemCore = "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemData = "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemDataOracleClient = "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemDeployment = "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemDesign = "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemDirectoryServices = "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemDrawing = "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemDrawingDesign = "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemEnterpriseServices = "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemManagement = "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemMessaging = "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemNumerics = "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemRuntimeRemoting = "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemRuntimeSerializationFormattersSoap = "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemSecurity = "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemServiceProcess = "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemWeb = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemWebAbstractions = "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebDynamicData = "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebDynamicDataDesign = "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebEntityDesign = "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemWebExtensions = "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebExtensionsDesign = "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebMobile = "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemWebRegularExpressions = "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemWebRouting = "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
	.field static assembly literal string SystemWebServices = "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string SystemWindowsForms = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string SystemXml = "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	.field static assembly literal string VJSharpCodeProvider = "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
	.field static assembly literal string WindowsBase = "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
}
.class private abstract sealed FXAssembly
	extends [mscorlib]System.Object
{
	.field static assembly literal string Version = "4.0.0.0"
}
.class private abstract sealed ThisAssembly
	extends [mscorlib]System.Object
{
	.field static assembly literal string Copyright = bytearray(A9 00 20 00 4D 00 69 00 63 00 72 00 6F 00 73 00 6F 00 66 00 74 00 20 00 43 00 6F 00 72 00 70 00 6F 00 72 00 61 00 74 00 69 00 6F 00 6E 00 2E 00 20 00 20 00 41 00 6C 00 6C 00 20 00 72 00 69 00 67 00 68 00 74 00 73 00 20 00 72 00 65 00 73 00 65 00 72 00 76 00 65 00 64 00 2E 00)
	.field static assembly literal int32 DailyBuildNumber = int32(0x000050E2)
	.field static assembly literal string DefaultAlias = "System.Dynamic.dll"
	.field static assembly literal string Description = "System.Dynamic.dll"
	.field static assembly literal string InformationalVersion = "4.0.20706.0"
	.field static assembly literal string Title = "System.Dynamic.dll"
	.field static assembly literal string Version = "4.0.0.0"
}
.namespace System.Dynamic
{
	.class private abstract ArgBuilder
		extends [mscorlib]System.Object
	{
		.method assembly virtual hidebysig newslot strict abstract 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
		}
		.method assembly virtual hidebysig newslot strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig newslot strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression newValue)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class private abstract sealed Assert
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig specialname 
			class [mscorlib]System.Exception get_Unreachable()
		{
			ret
		}
		.method assembly static hidebysig 
			void NotNull(object var)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotNull(object var1, object var2)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotNull(object var1, object var2, object var3)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotNull(object var1, object var2, object var3, object var4)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotEmpty(string str)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotEmpty<'T'>(class [mscorlib]'System.Collections.Generic.ICollection`1'<!!0> 'array')
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void NotNullItems<class 'T'>(class [mscorlib]'System.Collections.Generic.IEnumerable`1'<!!0> items)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.method assembly static hidebysig 
			void IsTrue(class [mscorlib]'System.Func`1'<bool> predicate)
		{
			.custom instance void [mscorlib]System.Diagnostics.ConditionalAttribute::.ctor(string) = { string('DEBUG') }
			ret
		}
		.property class [mscorlib]System.Exception Unreachable()
		{
			.get class [mscorlib]System.Exception System.Dynamic.Assert::get_Unreachable()
		}
	}
	.class private sealed BoolArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private sealed BoundDispEvent
		extends [System.Core]System.Dynamic.DynamicObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(object rcw, valuetype [mscorlib]System.Guid sourceIid, int32 dispid)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool TryBinaryOperation(class [System.Core]System.Dynamic.BinaryOperationBinder binder, object 'handler', [out] object& result)
		{
			ret
		}
	}
	.class private abstract sealed CollectionExtensions
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			!!0[] RemoveFirst<'T'>(!!0[] 'array')
		{
			ret
		}
		.method assembly static hidebysig 
			!!0[] AddFirst<'T'>(class [mscorlib]'System.Collections.Generic.IList`1'<!!0> list, !!0 item)
		{
			ret
		}
		.method assembly static hidebysig 
			!!0[] ToArray<'T'>(class [mscorlib]'System.Collections.Generic.IList`1'<!!0> list)
		{
			ret
		}
		.method assembly static hidebysig 
			!!0[] AddLast<'T'>(class [mscorlib]'System.Collections.Generic.IList`1'<!!0> list, !!0 item)
		{
			ret
		}
	}
	.class private abstract sealed ComBinder
		extends [mscorlib]System.Object
	{
		.class nested assembly ComGetMemberBinder
			extends [System.Core]System.Dynamic.GetMemberBinder
		{
			.method assembly hidebysig specialname 
				instance void .ctor(class [System.Core]System.Dynamic.GetMemberBinder originalBinder, bool CanReturnCallables)
			{
				ret
			}
			.method public virtual hidebysig 
				instance class [System.Core]System.Dynamic.DynamicMetaObject FallbackGetMember(class [System.Core]System.Dynamic.DynamicMetaObject target, class [System.Core]System.Dynamic.DynamicMetaObject errorSuggestion)
			{
				ret
			}
			.method public virtual hidebysig 
				instance int32 GetHashCode()
			{
				ret
			}
			.method public virtual hidebysig 
				instance bool Equals(object obj)
			{
				ret
			}
			.field assembly bool _CanReturnCallables
		}
		.method public static hidebysig 
			bool IsComObject(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindGetMember(class [System.Core]System.Dynamic.GetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', [out] class [System.Core]System.Dynamic.DynamicMetaObject& result, bool delayInvocation)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindGetMember(class [System.Core]System.Dynamic.GetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindSetMember(class [System.Core]System.Dynamic.SetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', class [System.Core]System.Dynamic.DynamicMetaObject 'value', [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindInvoke(class [System.Core]System.Dynamic.InvokeBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', class [System.Core]System.Dynamic.DynamicMetaObject[] args, [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindInvokeMember(class [System.Core]System.Dynamic.InvokeMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', class [System.Core]System.Dynamic.DynamicMetaObject[] args, [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindGetIndex(class [System.Core]System.Dynamic.GetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', class [System.Core]System.Dynamic.DynamicMetaObject[] args, [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryBindSetIndex(class [System.Core]System.Dynamic.SetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', class [System.Core]System.Dynamic.DynamicMetaObject[] args, class [System.Core]System.Dynamic.DynamicMetaObject 'value', [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryConvert(class [System.Core]System.Dynamic.ConvertBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'instance', [out] class [System.Core]System.Dynamic.DynamicMetaObject& result)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.IEnumerable`1'<string> GetDynamicMemberNames(object 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]'System.Collections.Generic.IList`1'<string> GetDynamicDataMemberNames(object 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]'System.Collections.Generic.IList`1'<valuetype [mscorlib]'System.Collections.Generic.KeyValuePair`2'<string,object>> GetDynamicDataMembers(object 'value', class [mscorlib]'System.Collections.Generic.IEnumerable`1'<string> names)
		{
			ret
		}
	}
	.class private abstract sealed ComBinderHelpers
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			bool PreferPut(class [mscorlib]System.Type 'type', bool holdsNull)
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsByRef(class [System.Core]System.Dynamic.DynamicMetaObject mo)
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsStrongBoxArg(class [System.Core]System.Dynamic.DynamicMetaObject o)
		{
			ret
		}
		.method assembly static hidebysig 
			bool[] ProcessArgumentsForCom(class [System.Core]System.Dynamic.DynamicMetaObject[]& args)
		{
			ret
		}
		.method assembly static hidebysig 
			class [System.Core]System.Dynamic.BindingRestrictions GetTypeRestrictionForDynamicMetaObject(class [System.Core]System.Dynamic.DynamicMetaObject obj)
		{
			ret
		}
	}
	.class private abstract sealed ComDispIds
		extends [mscorlib]System.Object
	{
		.field static assembly literal int32 'DISPID_NEWENUM' = int32(0xFFFFFFFC)
		.field static assembly literal int32 'DISPID_PROPERTYPUT' = int32(0xFFFFFFFD)
		.field static assembly literal int32 'DISPID_VALUE' = int32(0x00000000)
	}
	.class private ComEventDesc
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field assembly int32 dispid
		.field assembly valuetype [mscorlib]System.Guid sourceIID
	}
	.class private sealed ComEventSink
		extends [mscorlib]System.MarshalByRefObject
		implements [mscorlib]System.Reflection.IReflect, [mscorlib]System.IDisposable
	{
		.method public static hidebysig 
			class System.Dynamic.ComEventSink FromRuntimeCallableWrapper(object rcw, valuetype [mscorlib]System.Guid sourceIid, bool createIfNotFound)
		{
			ret
		}
		.method public hidebysig 
			instance void AddHandler(int32 dispid, object func)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveHandler(int32 dispid, object func)
		{
			ret
		}
		.method public hidebysig 
			instance object ExecuteHandler(string name, object[] args)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.FieldInfo GetField(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.FieldInfo[] GetFields(valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.MemberInfo[] GetMember(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.MemberInfo[] GetMembers(valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.MethodInfo GetMethod(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.MethodInfo GetMethod(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr, class [mscorlib]System.Reflection.Binder binder, class [mscorlib]System.Type[] types, valuetype [mscorlib]System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.MethodInfo[] GetMethods(valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.PropertyInfo GetProperty(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr, class [mscorlib]System.Reflection.Binder binder, class [mscorlib]System.Type returnType, class [mscorlib]System.Type[] types, valuetype [mscorlib]System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.PropertyInfo GetProperty(string name, valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Reflection.PropertyInfo[] GetProperties(valuetype [mscorlib]System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Type get_UnderlyingSystemType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object InvokeMember(string name, valuetype [mscorlib]System.Reflection.BindingFlags invokeAttr, class [mscorlib]System.Reflection.Binder binder, object target, object[] args, valuetype [mscorlib]System.Reflection.ParameterModifier[] modifiers, class [mscorlib]System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.property instance class [mscorlib]System.Type UnderlyingSystemType()
		{
			.get instance class [mscorlib]System.Type System.Dynamic.ComEventSink::get_UnderlyingSystemType()
		}
	}
	.class private sealed ComEventSinkProxy
		extends [mscorlib]System.Runtime.Remoting.Proxies.RealProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class System.Dynamic.ComEventSink sink, valuetype [mscorlib]System.Guid sinkIid)
		{
			ret
		}
		.method public virtual hidebysig 
			instance native int SupportsInterface(valuetype [mscorlib]System.Guid& iid)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessage Invoke(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg)
		{
			ret
		}
	}
	.class private ComEventSinksContainer
		extends class [mscorlib]'System.Collections.Generic.List`1'<class System.Dynamic.ComEventSink>
		implements [mscorlib]System.IDisposable
	{
		.method public static hidebysig 
			class System.Dynamic.ComEventSinksContainer FromRuntimeCallableWrapper(object rcw, bool createIfNotFound)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
	}
	.class private ComFallbackMetaObject
		extends [System.Core]System.Dynamic.DynamicMetaObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Linq.Expressions.Expression expression, class [System.Core]System.Dynamic.BindingRestrictions restrictions, object arg)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetIndex(class [System.Core]System.Dynamic.GetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetIndex(class [System.Core]System.Dynamic.SetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetMember(class [System.Core]System.Dynamic.GetMemberBinder binder)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvokeMember(class [System.Core]System.Dynamic.InvokeMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetMember(class [System.Core]System.Dynamic.SetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Dynamic.ComUnwrappedMetaObject UnwrapSelf()
		{
			ret
		}
	}
	.class private abstract sealed ComHresults
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			bool IsSuccess(int32 'hresult')
		{
			ret
		}
		.field static assembly literal int32 'CONNECT_E_NOCONNECTION' = int32(0x80040200)
		.field static assembly literal int32 'DISP_E_ARRAYISLOCKED' = int32(0x8002000D)
		.field static assembly literal int32 'DISP_E_BADINDEX' = int32(0x8002000B)
		.field static assembly literal int32 'DISP_E_BADPARAMCOUNT' = int32(0x8002000E)
		.field static assembly literal int32 'DISP_E_BADVARTYPE' = int32(0x80020008)
		.field static assembly literal int32 'DISP_E_EXCEPTION' = int32(0x80020009)
		.field static assembly literal int32 'DISP_E_MEMBERNOTFOUND' = int32(0x80020003)
		.field static assembly literal int32 'DISP_E_NONAMEDARGS' = int32(0x80020007)
		.field static assembly literal int32 'DISP_E_OVERFLOW' = int32(0x8002000A)
		.field static assembly literal int32 'DISP_E_PARAMNOTFOUND' = int32(0x80020004)
		.field static assembly literal int32 'DISP_E_PARAMNOTOPTIONAL' = int32(0x8002000F)
		.field static assembly literal int32 'DISP_E_TYPEMISMATCH' = int32(0x80020005)
		.field static assembly literal int32 'DISP_E_UNKNOWNINTERFACE' = int32(0x80020001)
		.field static assembly literal int32 'DISP_E_UNKNOWNLCID' = int32(0x8002000C)
		.field static assembly literal int32 'DISP_E_UNKNOWNNAME' = int32(0x80020006)
		.field static assembly literal int32 'E_FAIL' = int32(0x80004005)
		.field static assembly literal int32 'E_NOINTERFACE' = int32(0x80004002)
		.field static assembly literal int32 'S_OK' = int32(0x00000000)
		.field static assembly literal int32 'TYPE_E_LIBNOTREGISTERED' = int32(0x8002801D)
	}
	.class private sealed ComInvokeAction
		extends [System.Core]System.Dynamic.InvokeBinder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Dynamic.CallInfo callInfo)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject FallbackInvoke(class [System.Core]System.Dynamic.DynamicMetaObject target, class [System.Core]System.Dynamic.DynamicMetaObject[] args, class [System.Core]System.Dynamic.DynamicMetaObject errorSuggestion)
		{
			ret
		}
	}
	.class private sealed ComInvokeBinder
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Dynamic.CallInfo callInfo, class [System.Core]System.Dynamic.DynamicMetaObject[] args, bool[] isByRef, class [System.Core]System.Dynamic.BindingRestrictions restrictions, class [System.Core]System.Linq.Expressions.Expression 'method', class [System.Core]System.Linq.Expressions.Expression dispatch, class System.Dynamic.ComMethodDesc methodDesc)
		{
			ret
		}
		.method assembly hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject Invoke()
		{
			ret
		}
	}
	.class private ComMetaObject
		extends [System.Core]System.Dynamic.DynamicMetaObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Linq.Expressions.Expression expression, class [System.Core]System.Dynamic.BindingRestrictions restrictions, object arg)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvokeMember(class [System.Core]System.Dynamic.InvokeMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvoke(class [System.Core]System.Dynamic.InvokeBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetMember(class [System.Core]System.Dynamic.GetMemberBinder binder)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetMember(class [System.Core]System.Dynamic.SetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetIndex(class [System.Core]System.Dynamic.GetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetIndex(class [System.Core]System.Dynamic.SetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
	}
	.class private sealed ComMethodDesc
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor(string name, int32 dispId)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void .ctor(string name, int32 dispId, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.INVOKEKIND' invkind)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.FUNCDESC' funcDesc)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_DispId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPropertyGet()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsDataMember()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPropertyPut()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPropertyPutRef()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance int32 get_ParamCount()
		{
			ret
		}
		.field assembly initonly valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.INVOKEKIND' InvokeKind
		.property instance int32 DispId()
		{
			.get instance int32 System.Dynamic.ComMethodDesc::get_DispId()
		}
		.property instance bool IsDataMember()
		{
			.get instance bool System.Dynamic.ComMethodDesc::get_IsDataMember()
		}
		.property instance bool IsPropertyGet()
		{
			.get instance bool System.Dynamic.ComMethodDesc::get_IsPropertyGet()
		}
		.property instance bool IsPropertyPut()
		{
			.get instance bool System.Dynamic.ComMethodDesc::get_IsPropertyPut()
		}
		.property instance bool IsPropertyPutRef()
		{
			.get instance bool System.Dynamic.ComMethodDesc::get_IsPropertyPutRef()
		}
		.property instance string Name()
		{
			.get instance string System.Dynamic.ComMethodDesc::get_Name()
		}
		.property instance int32 ParamCount()
		{
			.get instance int32 System.Dynamic.ComMethodDesc::get_ParamCount()
		}
	}
	.class private ComObject
		extends [mscorlib]System.Object
		implements [System.Core]System.Dynamic.IDynamicMetaObjectProvider
	{
		.method assembly hidebysig specialname 
			instance void .ctor(object rcw)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance object get_RuntimeCallableWrapper()
		{
			ret
		}
		.method public static hidebysig 
			class System.Dynamic.ComObject ObjectToComObject(object rcw)
		{
			ret
		}
		.method assembly static hidebysig 
			class [System.Core]System.Linq.Expressions.MemberExpression RcwFromComObject(class [System.Core]System.Linq.Expressions.Expression comObject)
		{
			ret
		}
		.method assembly static hidebysig 
			class [System.Core]System.Linq.Expressions.MethodCallExpression RcwToComObject(class [System.Core]System.Linq.Expressions.Expression rcw)
		{
			ret
		}
		.method assembly virtual hidebysig newslot strict 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> GetMemberNames(bool dataOnly)
		{
			ret
		}
		.method assembly virtual hidebysig newslot strict 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<valuetype [mscorlib]'System.Collections.Generic.KeyValuePair`2'<string,object>> GetMembers(class [mscorlib]'System.Collections.Generic.IEnumerable`1'<string> names)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class [System.Core]System.Dynamic.DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			.override [System.Core]System.Dynamic.IDynamicMetaObjectProvider::GetMetaObject
			ret
		}
		.method assembly static hidebysig 
			bool IsComObject(object obj)
		{
			ret
		}
		.property instance object RuntimeCallableWrapper()
		{
			.get instance object System.Dynamic.ComObject::get_RuntimeCallableWrapper()
		}
	}
	.class private abstract sealed ComRuntimeHelpers
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void CheckThrowException(int32 'hresult', valuetype System.Dynamic.ExcepInfo& excepInfo, uint32 argErr, string message)
		{
			ret
		}
		.method assembly static hidebysig 
			void GetInfoFromType(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo, [out] string& name, [out] string& documentation)
		{
			ret
		}
		.method assembly static hidebysig 
			string GetNameOfMethod(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo, int32 memid)
		{
			ret
		}
		.method assembly static hidebysig 
			string GetNameOfLib(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeLib typeLib)
		{
			ret
		}
		.method assembly static hidebysig 
			string GetNameOfType(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo GetITypeInfoFromIDispatch(class System.Dynamic.IDispatch dispatch, bool throwIfMissingExpectedTypeInfo)
		{
			ret
		}
		.method assembly static hidebysig 
			valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.TYPEATTR' GetTypeAttrForTypeInfo(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo)
		{
			ret
		}
		.method assembly static hidebysig 
			valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.TYPELIBATTR' GetTypeAttrForTypeLib(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeLib typeLib)
		{
			ret
		}
		.method public static hidebysig 
			class System.Dynamic.BoundDispEvent CreateComEvent(object rcw, valuetype [mscorlib]System.Guid sourceIid, int32 dispid)
		{
			ret
		}
		.method public static hidebysig 
			class System.Dynamic.DispCallable CreateDispCallable(class System.Dynamic.IDispatchComObject dispatch, class System.Dynamic.ComMethodDesc 'method')
		{
			ret
		}
	}
	.class private sealed ComTypeClassDesc
		extends System.Dynamic.ComTypeDesc
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo)
		{
			ret
		}
		.method assembly hidebysig 
			instance bool Implements(string itfName, bool isSourceItf)
		{
			ret
		}
	}
	.class private ComTypeDesc
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo)
		{
			ret
		}
		.method assembly static hidebysig 
			class System.Dynamic.ComTypeDesc FromITypeInfo(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.TYPEATTR' typeAttr)
		{
			ret
		}
		.method assembly static hidebysig 
			class System.Dynamic.ComTypeDesc CreateEmptyTypeDesc()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> get_EmptyEvents()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class [mscorlib]System.Collections.Hashtable get_Funcs()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void set_Funcs(class [mscorlib]System.Collections.Hashtable 'value')
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void set_Puts(class [mscorlib]System.Collections.Hashtable 'value')
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void set_PutRefs(class [mscorlib]System.Collections.Hashtable 'value')
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> get_Events()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void set_Events(class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> 'value')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetFunc(string name, [out] class System.Dynamic.ComMethodDesc& 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance void AddFunc(string name, class System.Dynamic.ComMethodDesc 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetPut(string name, [out] class System.Dynamic.ComMethodDesc& 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance void AddPut(string name, class System.Dynamic.ComMethodDesc 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetPutRef(string name, [out] class System.Dynamic.ComMethodDesc& 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance void AddPutRef(string name, class System.Dynamic.ComMethodDesc 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetEvent(string name, [out] class System.Dynamic.ComEventDesc& event)
		{
			ret
		}
		.method assembly hidebysig 
			instance string[] GetMemberNames(bool dataOnly)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance valuetype [mscorlib]System.Guid get_Guid()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void set_Guid(valuetype [mscorlib]System.Guid 'value')
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class System.Dynamic.ComMethodDesc get_GetItem()
		{
			ret
		}
		.method assembly hidebysig 
			instance void EnsureGetItem(class System.Dynamic.ComMethodDesc candidate)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class System.Dynamic.ComMethodDesc get_SetItem()
		{
			ret
		}
		.method assembly hidebysig 
			instance void EnsureSetItem(class System.Dynamic.ComMethodDesc candidate)
		{
			ret
		}
		.property class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> EmptyEvents()
		{
			.get class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> System.Dynamic.ComTypeDesc::get_EmptyEvents()
		}
		.property instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> Events()
		{
			.get instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc> System.Dynamic.ComTypeDesc::get_Events()
			.set instance void System.Dynamic.ComTypeDesc::set_Events(class [mscorlib]'System.Collections.Generic.Dictionary`2'<string,class System.Dynamic.ComEventDesc>)
		}
		.property instance class [mscorlib]System.Collections.Hashtable Funcs()
		{
			.get instance class [mscorlib]System.Collections.Hashtable System.Dynamic.ComTypeDesc::get_Funcs()
			.set instance void System.Dynamic.ComTypeDesc::set_Funcs(class [mscorlib]System.Collections.Hashtable)
		}
		.property instance class System.Dynamic.ComMethodDesc GetItem()
		{
			.get instance class System.Dynamic.ComMethodDesc System.Dynamic.ComTypeDesc::get_GetItem()
		}
		.property instance valuetype [mscorlib]System.Guid Guid()
		{
			.get instance valuetype [mscorlib]System.Guid System.Dynamic.ComTypeDesc::get_Guid()
			.set instance void System.Dynamic.ComTypeDesc::set_Guid(valuetype [mscorlib]System.Guid)
		}
		.property instance class [mscorlib]System.Collections.Hashtable PutRefs()
		{
			.set instance void System.Dynamic.ComTypeDesc::set_PutRefs(class [mscorlib]System.Collections.Hashtable)
		}
		.property instance class [mscorlib]System.Collections.Hashtable Puts()
		{
			.set instance void System.Dynamic.ComTypeDesc::set_Puts(class [mscorlib]System.Collections.Hashtable)
		}
		.property instance class System.Dynamic.ComMethodDesc SetItem()
		{
			.get instance class System.Dynamic.ComMethodDesc System.Dynamic.ComTypeDesc::get_SetItem()
		}
		.property instance string TypeName()
		{
			.get instance string System.Dynamic.ComTypeDesc::get_TypeName()
		}
	}
	.class private sealed ComTypeEnumDesc
		extends System.Dynamic.ComTypeDesc
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo)
		{
			ret
		}
	}
	.class private sealed ComTypeLibDesc
		extends [mscorlib]System.Object
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method assembly static hidebysig 
			class System.Dynamic.ComTypeLibDesc GetFromTypeLib(class [mscorlib]System.Runtime.InteropServices.ComTypes.ITypeLib typeLib)
		{
			ret
		}
		.method assembly hidebysig 
			instance class System.Dynamic.ComTypeClassDesc GetCoClassForInterface(string itfName)
		{
			ret
		}
	}
	.class private sealed ComUnwrappedMetaObject
		extends [System.Core]System.Dynamic.DynamicMetaObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Linq.Expressions.Expression expression, class [System.Core]System.Dynamic.BindingRestrictions restrictions, object 'value')
		{
			ret
		}
	}
	.class private abstract sealed ContractUtils
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			void Requires(bool precondition, string paramName)
		{
			ret
		}
		.method assembly static hidebysig 
			void Requires(bool precondition, string paramName, string message)
		{
			ret
		}
		.method assembly static hidebysig 
			void RequiresNotNull(object 'value', string paramName)
		{
			ret
		}
	}
	.class private ConversionArgBuilder
		extends System.Dynamic.ArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType, class System.Dynamic.SimpleArgBuilder innerBuilder)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
	}
	.class private ConvertArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType, class [mscorlib]System.Type marshalType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression newValue)
		{
			ret
		}
	}
	.class private ConvertibleArgBuilder
		extends System.Dynamic.ArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
	}
	.class private sealed CurrencyArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private sealed DateTimeArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private sealed DispCallable
		extends [mscorlib]System.Object
		implements [System.Core]System.Dynamic.IDynamicMetaObjectProvider
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class System.Dynamic.IDispatchComObject dispatch, string memberName, int32 dispId)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Dynamic.IDispatchComObject get_DispatchComObject()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Dynamic.IDispatch get_DispatchObject()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_MemberName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_DispId()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [System.Core]System.Dynamic.DynamicMetaObject GetMetaObject(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance int32 DispId()
		{
			.get instance int32 System.Dynamic.DispCallable::get_DispId()
		}
		.property instance class System.Dynamic.IDispatchComObject DispatchComObject()
		{
			.get instance class System.Dynamic.IDispatchComObject System.Dynamic.DispCallable::get_DispatchComObject()
		}
		.property instance class System.Dynamic.IDispatch DispatchObject()
		{
			.get instance class System.Dynamic.IDispatch System.Dynamic.DispCallable::get_DispatchObject()
		}
		.property instance string MemberName()
		{
			.get instance string System.Dynamic.DispCallable::get_MemberName()
		}
	}
	.class private DispCallableMetaObject
		extends [System.Core]System.Dynamic.DynamicMetaObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Linq.Expressions.Expression expression, class System.Dynamic.DispCallable callable)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetIndex(class [System.Core]System.Dynamic.GetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvoke(class [System.Core]System.Dynamic.InvokeBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetIndex(class [System.Core]System.Dynamic.SetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
	}
	.class private DispatchArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private abstract sealed Error
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			class [mscorlib]System.Exception COMObjectDoesNotSupportEvents()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception COMObjectDoesNotSupportSourceInterface()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception SetComObjectDataFailed()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception MethodShouldNotBeCalled()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception UnexpectedVarEnum(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispBadParamCount(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispMemberNotFound(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispNoNamedArgs(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispOverflow(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispTypeMismatch(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception DispParamNotOptional(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception CannotRetrieveTypeInformation()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception GetIDsOfNamesInvalid(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception UnsupportedEnumType()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception UnsupportedHandlerType()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception CouldNotGetDispId(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception AmbiguousConversion(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception VariantGetAccessorNYI(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception ArgumentNull(string paramName)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception ArgumentOutOfRange(string paramName)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception NotImplemented()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Exception NotSupported()
		{
			ret
		}
	}
	.class private ErrorArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private sequential sealed ExcepInfo
		extends [mscorlib]System.ValueType
	{
		.method assembly hidebysig 
			instance void Dummy()
		{
			ret
		}
		.method assembly hidebysig 
			instance class [mscorlib]System.Exception GetException()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class private abstract sealed Helpers
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			class [System.Core]System.Linq.Expressions.Expression Convert(class [System.Core]System.Linq.Expressions.Expression expression, class [mscorlib]System.Type 'type')
		{
			ret
		}
	}
	.class private interface abstract import IDispatch
	{
		.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('00020400-0000-0000-C000-000000000046') }
		.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
		.method public virtual hidebysig newslot abstract 
			instance int32 TryGetTypeInfoCount([out] uint32& pctinfo)
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 TryGetTypeInfo(uint32 iTInfo, int32 lcid, [out] native int& info)
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 TryGetIDsOfNames(valuetype [mscorlib]System.Guid& iid, string[] marshal(lpwstr[ + 2]) names, uint32 cNames, int32 lcid, [out] int32[] marshal(int32[ + 2]) rgDispId)
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 TryInvoke(int32 dispIdMember, valuetype [mscorlib]System.Guid& riid, int32 lcid, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.INVOKEKIND' wFlags, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.DISPPARAMS'& pDispParams, [out] object& VarResult, [out] valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.EXCEPINFO'& pExcepInfo, [out] uint32& puArgErr)
			preservesig 
		{
		}
	}
	.class private sealed IDispatchComObject
		extends System.Dynamic.ComObject
		implements [System.Core]System.Dynamic.IDynamicMetaObjectProvider
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class System.Dynamic.IDispatch rcw)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Dynamic.ComTypeDesc get_ComTypeDesc()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Dynamic.IDispatch get_DispatchObject()
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetGetItem([out] class System.Dynamic.ComMethodDesc& 'value')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetSetItem([out] class System.Dynamic.ComMethodDesc& 'value')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetMemberMethod(string name, [out] class System.Dynamic.ComMethodDesc& 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetMemberEvent(string name, [out] class System.Dynamic.ComEventDesc& event)
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetMemberMethodExplicit(string name, [out] class System.Dynamic.ComMethodDesc& 'method')
		{
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetPropertySetterExplicit(string name, [out] class System.Dynamic.ComMethodDesc& 'method', class [mscorlib]System.Type limitType, bool holdsNull)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> GetMemberNames(bool dataOnly)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<valuetype [mscorlib]'System.Collections.Generic.KeyValuePair`2'<string,object>> GetMembers(class [mscorlib]'System.Collections.Generic.IEnumerable`1'<string> names)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class [System.Core]System.Dynamic.DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			.override [System.Core]System.Dynamic.IDynamicMetaObjectProvider::GetMetaObject
			ret
		}
		.method assembly hidebysig 
			instance bool TryGetPropertySetter(string name, [out] class System.Dynamic.ComMethodDesc& 'method', class [mscorlib]System.Type limitType, bool holdsNull)
		{
			ret
		}
		.property instance class System.Dynamic.ComTypeDesc ComTypeDesc()
		{
			.get instance class System.Dynamic.ComTypeDesc System.Dynamic.IDispatchComObject::get_ComTypeDesc()
		}
		.property instance class System.Dynamic.IDispatch DispatchObject()
		{
			.get instance class System.Dynamic.IDispatch System.Dynamic.IDispatchComObject::get_DispatchObject()
		}
	}
	.class private interface abstract import IDispatchForReflection
	{
		.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('00020400-0000-0000-C000-000000000046') }
		.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(2) }
	}
	.class private sealed IDispatchMetaObject
		extends System.Dynamic.ComFallbackMetaObject
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [System.Core]System.Linq.Expressions.Expression expression, class System.Dynamic.IDispatchComObject self)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvokeMember(class [System.Core]System.Dynamic.InvokeMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindInvoke(class [System.Core]System.Dynamic.InvokeBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetMember(class [System.Core]System.Dynamic.GetMemberBinder binder)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindGetIndex(class [System.Core]System.Dynamic.GetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetIndex(class [System.Core]System.Dynamic.SetIndexBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject[] indexes, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Core]System.Dynamic.DynamicMetaObject BindSetMember(class [System.Core]System.Dynamic.SetMemberBinder binder, class [System.Core]System.Dynamic.DynamicMetaObject 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			class [System.Core]System.Dynamic.BindingRestrictions IDispatchRestriction(class [System.Core]System.Linq.Expressions.Expression expr, class System.Dynamic.ComTypeDesc typeDesc)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Dynamic.ComUnwrappedMetaObject UnwrapSelf()
		{
			ret
		}
	}
	.class private sealed IDispatchMethodIndices
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IDispatch_GetIDsOfNames = int32(0x00000005)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IDispatch_GetTypeInfo = int32(0x00000004)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IDispatch_GetTypeInfoCount = int32(0x00000003)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IDispatch_Invoke = int32(0x00000006)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IUnknown_AddRef = int32(0x00000001)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IUnknown_QueryInterface = int32(0x00000000)
		.field static public literal valuetype System.Dynamic.IDispatchMethodIndices IUnknown_Release = int32(0x00000002)
	}
	.class private interface abstract import IProvideClassInfo
	{
		.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('B196B283-BAB4-101A-B69C-00AA00341D07') }
		.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
		.method public virtual hidebysig newslot abstract 
			instance void GetClassInfo([out] native int& info)
		{
		}
	}
	.class private abstract sealed NativeMethods
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig pinvokeimpl("dummy" winapi) 
			void VariantClear(native int 'variant')
		{
		}
	}
	.class private sealed NullArgBuilder
		extends System.Dynamic.ArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
	}
	.class private sealed SR
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Resources.ResourceManager get_Resources()
		{
			ret
		}
		.method public static hidebysig 
			string GetString(string name, object[] args)
		{
			.param [2]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public static hidebysig 
			string GetString(string name)
		{
			ret
		}
		.method public static hidebysig 
			string GetString(string name, [out] bool& usedFallback)
		{
			ret
		}
		.method public static hidebysig 
			object GetObject(string name)
		{
			ret
		}
		.field static assembly literal string AmbiguousConversion = "AmbiguousConversion"
		.field static assembly literal string COMObjectDoesNotSupportEvents = "COMObjectDoesNotSupportEvents"
		.field static assembly literal string COMObjectDoesNotSupportSourceInterface = "COMObjectDoesNotSupportSourceInterface"
		.field static assembly literal string CannotCall = "CannotCall"
		.field static assembly literal string CannotRetrieveTypeInformation = "CannotRetrieveTypeInformation"
		.field static assembly literal string ComObjectExpected = "ComObjectExpected"
		.field static assembly literal string CouldNotGetDispId = "CouldNotGetDispId"
		.field static assembly literal string DispBadParamCount = "DispBadParamCount"
		.field static assembly literal string DispMemberNotFound = "DispMemberNotFound"
		.field static assembly literal string DispNoNamedArgs = "DispNoNamedArgs"
		.field static assembly literal string DispOverflow = "DispOverflow"
		.field static assembly literal string DispParamNotOptional = "DispParamNotOptional"
		.field static assembly literal string DispTypeMismatch = "DispTypeMismatch"
		.field static assembly literal string GetIDsOfNamesInvalid = "GetIDsOfNamesInvalid"
		.field static assembly literal string InvalidArgumentValue = "InvalidArgumentValue"
		.field static assembly literal string MethodShouldNotBeCalled = "MethodShouldNotBeCalled"
		.field static assembly literal string SetComObjectDataFailed = "SetComObjectDataFailed"
		.field static assembly literal string UnexpectedVarEnum = "UnexpectedVarEnum"
		.field static assembly literal string UnsupportedEnumType = "UnsupportedEnumType"
		.field static assembly literal string UnsupportedHandlerType = "UnsupportedHandlerType"
		.field static assembly literal string VariantGetAccessorNYI = "VariantGetAccessorNYI"
		.property class [mscorlib]System.Resources.ResourceManager Resources()
		{
			.get class [mscorlib]System.Resources.ResourceManager 'System.Dynamic.SR'::get_Resources()
		}
	}
	.class private sealed SRCategoryAttribute
		extends [System]System.ComponentModel.CategoryAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(32767) }
		.method public hidebysig specialname 
			instance void .ctor(string category)
		{
			ret
		}
		.method family virtual hidebysig 
			instance string GetLocalizedString(string 'value')
		{
			ret
		}
	}
	.class private sealed SRDescriptionAttribute
		extends [System]System.ComponentModel.DescriptionAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(32767) }
		.method public hidebysig specialname 
			instance void .ctor(string description)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.property instance string Description()
		{
			.get instance string System.Dynamic.SRDescriptionAttribute::get_Description()
		}
	}
	.class private SimpleArgBuilder
		extends System.Dynamic.ArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class [mscorlib]System.Type get_ParameterType()
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression newValue)
		{
			ret
		}
		.property instance class [mscorlib]System.Type ParameterType()
		{
			.get instance class [mscorlib]System.Type System.Dynamic.SimpleArgBuilder::get_ParameterType()
		}
	}
	.class private sealed SplatCallSite
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor(object callable)
		{
			ret
		}
		.method assembly hidebysig 
			instance object Invoke(object[] args)
		{
			ret
		}
		.field assembly initonly object _callable
		.field assembly class [System.Core]'System.Runtime.CompilerServices.CallSite`1'<class [mscorlib]'System.Func`4'<class [System.Core]System.Runtime.CompilerServices.CallSite,object,object[],object>> _site
	}
	.class private sealed SplatInvokeBinder
		extends [System.Core]System.Runtime.CompilerServices.CallSiteBinder
	{
		.method public virtual hidebysig 
			instance class [System.Core]System.Linq.Expressions.Expression Bind(object[] args, class [mscorlib]'System.Collections.ObjectModel.ReadOnlyCollection`1'<class [System.Core]System.Linq.Expressions.ParameterExpression> parameters, class [System.Core]System.Linq.Expressions.LabelTarget returnLabel)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static assembly initonly class System.Dynamic.SplatInvokeBinder Instance
	}
	.class private StringArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private abstract sealed Strings
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig specialname 
			string get_InvalidArgumentValue()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_ComObjectExpected()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_CannotCall()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_COMObjectDoesNotSupportEvents()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_COMObjectDoesNotSupportSourceInterface()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_SetComObjectDataFailed()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_MethodShouldNotBeCalled()
		{
			ret
		}
		.method assembly static hidebysig 
			string UnexpectedVarEnum(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispBadParamCount(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispMemberNotFound(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispNoNamedArgs(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispOverflow(object p0)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispTypeMismatch(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			string DispParamNotOptional(object p0)
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_CannotRetrieveTypeInformation()
		{
			ret
		}
		.method assembly static hidebysig 
			string GetIDsOfNamesInvalid(object p0)
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_UnsupportedEnumType()
		{
			ret
		}
		.method assembly static hidebysig specialname 
			string get_UnsupportedHandlerType()
		{
			ret
		}
		.method assembly static hidebysig 
			string CouldNotGetDispId(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			string AmbiguousConversion(object p0, object p1)
		{
			ret
		}
		.method assembly static hidebysig 
			string VariantGetAccessorNYI(object p0)
		{
			ret
		}
		.property string COMObjectDoesNotSupportEvents()
		{
			.get string System.Dynamic.Strings::get_COMObjectDoesNotSupportEvents()
		}
		.property string COMObjectDoesNotSupportSourceInterface()
		{
			.get string System.Dynamic.Strings::get_COMObjectDoesNotSupportSourceInterface()
		}
		.property string CannotCall()
		{
			.get string System.Dynamic.Strings::get_CannotCall()
		}
		.property string CannotRetrieveTypeInformation()
		{
			.get string System.Dynamic.Strings::get_CannotRetrieveTypeInformation()
		}
		.property string ComObjectExpected()
		{
			.get string System.Dynamic.Strings::get_ComObjectExpected()
		}
		.property string InvalidArgumentValue()
		{
			.get string System.Dynamic.Strings::get_InvalidArgumentValue()
		}
		.property string MethodShouldNotBeCalled()
		{
			.get string System.Dynamic.Strings::get_MethodShouldNotBeCalled()
		}
		.property string SetComObjectDataFailed()
		{
			.get string System.Dynamic.Strings::get_SetComObjectDataFailed()
		}
		.property string UnsupportedEnumType()
		{
			.get string System.Dynamic.Strings::get_UnsupportedEnumType()
		}
		.property string UnsupportedHandlerType()
		{
			.get string System.Dynamic.Strings::get_UnsupportedHandlerType()
		}
	}
	.class private abstract sealed TypeUtils
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			class [mscorlib]System.Type GetNonNullableType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsNullableType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method assembly static hidebysig 
			bool AreReferenceAssignable(class [mscorlib]System.Type dest, class [mscorlib]System.Type src)
		{
			ret
		}
		.method assembly static hidebysig 
			bool AreAssignable(class [mscorlib]System.Type dest, class [mscorlib]System.Type src)
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsImplicitlyConvertible(class [mscorlib]System.Type source, class [mscorlib]System.Type destination)
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsImplicitlyConvertible(class [mscorlib]System.Type source, class [mscorlib]System.Type destination, bool considerUserDefined)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Reflection.MethodInfo GetUserDefinedCoercionMethod(class [mscorlib]System.Type convertFrom, class [mscorlib]System.Type convertToType, bool implicitOnly)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Reflection.MethodInfo FindConversionOperator(class [mscorlib]System.Reflection.MethodInfo[] methods, class [mscorlib]System.Type typeFrom, class [mscorlib]System.Type typeTo, bool implicitOnly)
		{
			ret
		}
		.field static assembly literal valuetype [mscorlib]System.Reflection.MethodAttributes PublicStatic = int32(0x00000016)
	}
	.class private UnknownArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private abstract sealed UnsafeMethods
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			native int ConvertSByteByrefToPtr(int8& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertInt16ByrefToPtr(int16& 'value')
		{
			ret
		}
		.method public static hidebysig 
			native int ConvertInt32ByrefToPtr(int32& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertInt64ByrefToPtr(int64& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertByteByrefToPtr(uint8& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertUInt16ByrefToPtr(uint16& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertUInt32ByrefToPtr(uint32& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertUInt64ByrefToPtr(uint64& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertIntPtrByrefToPtr(native int& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertUIntPtrByrefToPtr(native uint& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertSingleByrefToPtr(float32& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertDoubleByrefToPtr(float64& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			native int ConvertDecimalByrefToPtr(valuetype [mscorlib]System.Decimal& 'value')
		{
			ret
		}
		.method public static hidebysig 
			native int ConvertVariantByrefToPtr(valuetype System.Dynamic.Variant& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			valuetype System.Dynamic.Variant GetVariantForObject(object obj)
		{
			ret
		}
		.method assembly static hidebysig 
			void InitVariantForObject(object obj, valuetype System.Dynamic.Variant& 'variant')
		{
			ret
		}
		.method public static hidebysig 
			object GetObjectForVariant(valuetype System.Dynamic.Variant 'variant')
		{
			.custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string, bool) = { string('do not use this method') bool(true) }
			ret
		}
		.method public static hidebysig 
			int32 IUnknownRelease(native int interfacePointer)
		{
			.custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string, bool) = { string('do not use this method') bool(true) }
			ret
		}
		.method public static hidebysig 
			void IUnknownReleaseNotZero(native int interfacePointer)
		{
			.custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string, bool) = { string('do not use this method') bool(true) }
			ret
		}
		.method public static hidebysig 
			int32 IDispatchInvoke(native int dispatchPointer, int32 memberDispId, valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.INVOKEKIND' 'flags', valuetype [mscorlib]'System.Runtime.InteropServices.ComTypes.DISPPARAMS'& dispParams, [out] valuetype System.Dynamic.Variant& result, [out] valuetype System.Dynamic.ExcepInfo& excepInfo, [out] uint32& argErr)
		{
			.custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string, bool) = { string('do not use this method') bool(true) }
			ret
		}
		.method public static hidebysig 
			native int GetIdsOfNamedParameters(class System.Dynamic.IDispatch dispatch, string[] names, int32 methodDispId, [out] valuetype [mscorlib]System.Runtime.InteropServices.GCHandle& pinningHandle)
		{
			.custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string, bool) = { string('do not use this method') bool(true) }
			ret
		}
		.method assembly static hidebysig specialname 
			class [mscorlib]System.Reflection.Emit.ModuleBuilder get_DynamicModule()
		{
			ret
		}
		.field static assembly initonly native int NullInterfaceId
		.property class [mscorlib]System.Reflection.Emit.ModuleBuilder DynamicModule()
		{
			.get class [mscorlib]System.Reflection.Emit.ModuleBuilder System.Dynamic.UnsafeMethods::get_DynamicModule()
		}
	}
	.class private VarEnumSelector
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] explicitArgTypes)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance class System.Dynamic.VariantBuilder[] get_VariantBuilders()
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Type GetManagedMarshalType(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum varEnum)
		{
			ret
		}
		.property instance class System.Dynamic.VariantBuilder[] VariantBuilders()
		{
			.get instance class System.Dynamic.VariantBuilder[] System.Dynamic.VarEnumSelector::get_VariantBuilders()
		}
	}
	.class private explicit sealed Variant
		extends [mscorlib]System.ValueType
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method assembly static hidebysig 
			bool IsPrimitiveType(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum varEnum)
		{
			ret
		}
		.method public hidebysig 
			instance object ToObject()
		{
			ret
		}
		.method public hidebysig 
			instance void Clear()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Runtime.InteropServices.VarEnum get_VariantType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_VariantType(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum 'value')
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance bool get_IsEmpty()
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsNull()
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsIConvertible(class [mscorlib]System.IConvertible 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int8 get_AsI1()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsI1(int8 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefI1(int8& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int16 get_AsI2()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsI2(int16 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefI2(int16& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_AsI4()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsI4(int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefI4(int32& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_AsI8()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsI8(int64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefI8(int64& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8 get_AsUi1()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUi1(uint8 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUi1(uint8& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 get_AsUi2()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUi2(uint16 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUi2(uint16& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 get_AsUi4()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUi4(uint32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUi4(uint32& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 get_AsUi8()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUi8(uint64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUi8(uint64& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance native int get_AsInt()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsInt(native int 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefInt(native int& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance native uint get_AsUint()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUint(native uint 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUint(native uint& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AsBool()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsBool(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefBool(int16& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_AsError()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsError(int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefError(int32& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float32 get_AsR4()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsR4(float32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefR4(float32& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_AsR8()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsR8(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefR8(float64& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Decimal get_AsDecimal()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsDecimal(valuetype [mscorlib]System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefDecimal(valuetype [mscorlib]System.Decimal& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Decimal get_AsCy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsCy(valuetype [mscorlib]System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefCy(int64& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.DateTime get_AsDate()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsDate(valuetype [mscorlib]System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefDate(float64& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AsBstr()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsBstr(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefBstr(native int& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_AsUnknown()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsUnknown(object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefUnknown(native int& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_AsDispatch()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsDispatch(object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefDispatch(native int& 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_AsVariant()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsVariant(object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefVariant(valuetype System.Dynamic.Variant& 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAsByrefVariantIndirect(valuetype System.Dynamic.Variant& 'value')
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Reflection.PropertyInfo GetAccessor(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum varType)
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Reflection.MethodInfo GetByrefSetter(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum varType)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance bool AsBool()
		{
			.get instance bool System.Dynamic.Variant::get_AsBool()
			.set instance void System.Dynamic.Variant::set_AsBool(bool)
		}
		.property instance string AsBstr()
		{
			.get instance string System.Dynamic.Variant::get_AsBstr()
			.set instance void System.Dynamic.Variant::set_AsBstr(string)
		}
		.property instance valuetype [mscorlib]System.Decimal AsCy()
		{
			.get instance valuetype [mscorlib]System.Decimal System.Dynamic.Variant::get_AsCy()
			.set instance void System.Dynamic.Variant::set_AsCy(valuetype [mscorlib]System.Decimal)
		}
		.property instance valuetype [mscorlib]System.DateTime AsDate()
		{
			.get instance valuetype [mscorlib]System.DateTime System.Dynamic.Variant::get_AsDate()
			.set instance void System.Dynamic.Variant::set_AsDate(valuetype [mscorlib]System.DateTime)
		}
		.property instance valuetype [mscorlib]System.Decimal AsDecimal()
		{
			.get instance valuetype [mscorlib]System.Decimal System.Dynamic.Variant::get_AsDecimal()
			.set instance void System.Dynamic.Variant::set_AsDecimal(valuetype [mscorlib]System.Decimal)
		}
		.property instance object AsDispatch()
		{
			.get instance object System.Dynamic.Variant::get_AsDispatch()
			.set instance void System.Dynamic.Variant::set_AsDispatch(object)
		}
		.property instance int32 AsError()
		{
			.get instance int32 System.Dynamic.Variant::get_AsError()
			.set instance void System.Dynamic.Variant::set_AsError(int32)
		}
		.property instance int8 AsI1()
		{
			.get instance int8 System.Dynamic.Variant::get_AsI1()
			.set instance void System.Dynamic.Variant::set_AsI1(int8)
		}
		.property instance int16 AsI2()
		{
			.get instance int16 System.Dynamic.Variant::get_AsI2()
			.set instance void System.Dynamic.Variant::set_AsI2(int16)
		}
		.property instance int32 AsI4()
		{
			.get instance int32 System.Dynamic.Variant::get_AsI4()
			.set instance void System.Dynamic.Variant::set_AsI4(int32)
		}
		.property instance int64 AsI8()
		{
			.get instance int64 System.Dynamic.Variant::get_AsI8()
			.set instance void System.Dynamic.Variant::set_AsI8(int64)
		}
		.property instance native int AsInt()
		{
			.get instance native int System.Dynamic.Variant::get_AsInt()
			.set instance void System.Dynamic.Variant::set_AsInt(native int)
		}
		.property instance float32 AsR4()
		{
			.get instance float32 System.Dynamic.Variant::get_AsR4()
			.set instance void System.Dynamic.Variant::set_AsR4(float32)
		}
		.property instance float64 AsR8()
		{
			.get instance float64 System.Dynamic.Variant::get_AsR8()
			.set instance void System.Dynamic.Variant::set_AsR8(float64)
		}
		.property instance uint8 AsUi1()
		{
			.get instance uint8 System.Dynamic.Variant::get_AsUi1()
			.set instance void System.Dynamic.Variant::set_AsUi1(uint8)
		}
		.property instance uint16 AsUi2()
		{
			.get instance uint16 System.Dynamic.Variant::get_AsUi2()
			.set instance void System.Dynamic.Variant::set_AsUi2(uint16)
		}
		.property instance uint32 AsUi4()
		{
			.get instance uint32 System.Dynamic.Variant::get_AsUi4()
			.set instance void System.Dynamic.Variant::set_AsUi4(uint32)
		}
		.property instance uint64 AsUi8()
		{
			.get instance uint64 System.Dynamic.Variant::get_AsUi8()
			.set instance void System.Dynamic.Variant::set_AsUi8(uint64)
		}
		.property instance native uint AsUint()
		{
			.get instance native uint System.Dynamic.Variant::get_AsUint()
			.set instance void System.Dynamic.Variant::set_AsUint(native uint)
		}
		.property instance object AsUnknown()
		{
			.get instance object System.Dynamic.Variant::get_AsUnknown()
			.set instance void System.Dynamic.Variant::set_AsUnknown(object)
		}
		.property instance object AsVariant()
		{
			.get instance object System.Dynamic.Variant::get_AsVariant()
			.set instance void System.Dynamic.Variant::set_AsVariant(object)
		}
		.property instance bool IsEmpty()
		{
			.get instance bool System.Dynamic.Variant::get_IsEmpty()
		}
		.property instance valuetype [mscorlib]System.Runtime.InteropServices.VarEnum VariantType()
		{
			.get instance valuetype [mscorlib]System.Runtime.InteropServices.VarEnum System.Dynamic.Variant::get_VariantType()
			.set instance void System.Dynamic.Variant::set_VariantType(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum)
		}
	}
	.class private VariantArgBuilder
		extends System.Dynamic.SimpleArgBuilder
	{
		.method assembly hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type parameterType)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression Marshal(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression MarshalToRef(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly virtual hidebysig strict 
			instance class [System.Core]System.Linq.Expressions.Expression UnmarshalFromRef(class [System.Core]System.Linq.Expressions.Expression 'value')
		{
			ret
		}
	}
	.class private abstract sealed VariantArray
		extends [mscorlib]System.Object
	{
		.method assembly static hidebysig 
			class [System.Core]System.Linq.Expressions.MemberExpression GetStructField(class [System.Core]System.Linq.Expressions.ParameterExpression variantArray, int32 'field')
		{
			ret
		}
		.method assembly static hidebysig 
			class [mscorlib]System.Type GetStructType(int32 args)
		{
			ret
		}
	}
	.class private sequential sealed VariantArray1
		extends [mscorlib]System.ValueType
	{
		.field public valuetype System.Dynamic.Variant Element0
	}
	.class private sequential sealed VariantArray2
		extends [mscorlib]System.ValueType
	{
		.field public valuetype System.Dynamic.Variant Element0
		.field public valuetype System.Dynamic.Variant Element1
	}
	.class private sequential sealed VariantArray4
		extends [mscorlib]System.ValueType
	{
		.field public valuetype System.Dynamic.Variant Element0
		.field public valuetype System.Dynamic.Variant Element1
		.field public valuetype System.Dynamic.Variant Element2
		.field public valuetype System.Dynamic.Variant Element3
	}
	.class private sequential sealed VariantArray8
		extends [mscorlib]System.ValueType
	{
		.field public valuetype System.Dynamic.Variant Element0
		.field public valuetype System.Dynamic.Variant Element1
		.field public valuetype System.Dynamic.Variant Element2
		.field public valuetype System.Dynamic.Variant Element3
		.field public valuetype System.Dynamic.Variant Element4
		.field public valuetype System.Dynamic.Variant Element5
		.field public valuetype System.Dynamic.Variant Element6
		.field public valuetype System.Dynamic.Variant Element7
	}
	.class private VariantBuilder
		extends [mscorlib]System.Object
	{
		.method assembly hidebysig specialname 
			instance class [System.Core]System.Linq.Expressions.ParameterExpression get_TempVariable()
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance void .ctor(valuetype [mscorlib]System.Runtime.InteropServices.VarEnum targetComType, class System.Dynamic.ArgBuilder builder)
		{
			ret
		}
		.method assembly hidebysig specialname 
			instance bool get_IsByRef()
		{
			ret
		}
		.method assembly hidebysig 
			instance class [System.Core]System.Linq.Expressions.Expression InitializeArgumentVariant(class [System.Core]System.Linq.Expressions.MemberExpression 'variant', class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.method assembly hidebysig 
			instance class [System.Core]System.Linq.Expressions.Expression Clear()
		{
			ret
		}
		.method assembly hidebysig 
			instance class [System.Core]System.Linq.Expressions.Expression UpdateFromReturn(class [System.Core]System.Linq.Expressions.Expression parameter)
		{
			ret
		}
		.property instance bool IsByRef()
		{
			.get instance bool System.Dynamic.VariantBuilder::get_IsByRef()
		}
		.property instance class [System.Core]System.Linq.Expressions.ParameterExpression TempVariable()
		{
			.get instance class [System.Core]System.Linq.Expressions.ParameterExpression System.Dynamic.VariantBuilder::get_TempVariable()
		}
	}
}
